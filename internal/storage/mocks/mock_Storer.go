// Code generated by mockery v2.53.2. DO NOT EDIT.

package storagemocks

import (
	context "context"

	domain "github.com/huberts90/restful-api/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockStorer is an autogenerated mock type for the Storer type
type MockStorer struct {
	mock.Mock
}

type MockStorer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorer) EXPECT() *MockStorer_Expecter {
	return &MockStorer_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockStorer) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockStorer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockStorer_Expecter) Close() *MockStorer_Close_Call {
	return &MockStorer_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockStorer_Close_Call) Run(run func()) *MockStorer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorer_Close_Call) Return(_a0 error) *MockStorer_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorer_Close_Call) RunAndReturn(run func() error) *MockStorer_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *MockStorer) CreateUser(ctx context.Context, user domain.UserCreate) (int64, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserCreate) (int64, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserCreate) int64); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UserCreate) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockStorer_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user domain.UserCreate
func (_e *MockStorer_Expecter) CreateUser(ctx interface{}, user interface{}) *MockStorer_CreateUser_Call {
	return &MockStorer_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *MockStorer_CreateUser_Call) Run(run func(ctx context.Context, user domain.UserCreate)) *MockStorer_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserCreate))
	})
	return _c
}

func (_c *MockStorer_CreateUser_Call) Return(_a0 int64, _a1 error) *MockStorer_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_CreateUser_Call) RunAndReturn(run func(context.Context, domain.UserCreate) (int64, error)) *MockStorer_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *MockStorer) DeleteUser(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorer_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockStorer_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockStorer_Expecter) DeleteUser(ctx interface{}, id interface{}) *MockStorer_DeleteUser_Call {
	return &MockStorer_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *MockStorer_DeleteUser_Call) Run(run func(ctx context.Context, id int64)) *MockStorer_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockStorer_DeleteUser_Call) Return(_a0 error) *MockStorer_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorer_DeleteUser_Call) RunAndReturn(run func(context.Context, int64) error) *MockStorer_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *MockStorer) GetUserByID(ctx context.Context, id int64) (*domain.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*domain.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockStorer_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockStorer_Expecter) GetUserByID(ctx interface{}, id interface{}) *MockStorer_GetUserByID_Call {
	return &MockStorer_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, id)}
}

func (_c *MockStorer_GetUserByID_Call) Run(run func(ctx context.Context, id int64)) *MockStorer_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockStorer_GetUserByID_Call) Return(_a0 *domain.User, _a1 error) *MockStorer_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_GetUserByID_Call) RunAndReturn(run func(context.Context, int64) (*domain.User, error)) *MockStorer_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: ctx, page, pageSize
func (_m *MockStorer) ListUsers(ctx context.Context, page int, pageSize int) ([]domain.User, int, error) {
	ret := _m.Called(ctx, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []domain.User
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]domain.User, int, error)); ok {
		return rf(ctx, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []domain.User); ok {
		r0 = rf(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockStorer_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockStorer_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - page int
//   - pageSize int
func (_e *MockStorer_Expecter) ListUsers(ctx interface{}, page interface{}, pageSize interface{}) *MockStorer_ListUsers_Call {
	return &MockStorer_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx, page, pageSize)}
}

func (_c *MockStorer_ListUsers_Call) Run(run func(ctx context.Context, page int, pageSize int)) *MockStorer_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockStorer_ListUsers_Call) Return(_a0 []domain.User, _a1 int, _a2 error) *MockStorer_ListUsers_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockStorer_ListUsers_Call) RunAndReturn(run func(context.Context, int, int) ([]domain.User, int, error)) *MockStorer_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, id, user
func (_m *MockStorer) UpdateUser(ctx context.Context, id int64, user domain.UserUpdate) error {
	ret := _m.Called(ctx, id, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, domain.UserUpdate) error); ok {
		r0 = rf(ctx, id, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorer_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockStorer_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - user domain.UserUpdate
func (_e *MockStorer_Expecter) UpdateUser(ctx interface{}, id interface{}, user interface{}) *MockStorer_UpdateUser_Call {
	return &MockStorer_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, id, user)}
}

func (_c *MockStorer_UpdateUser_Call) Run(run func(ctx context.Context, id int64, user domain.UserUpdate)) *MockStorer_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(domain.UserUpdate))
	})
	return _c
}

func (_c *MockStorer_UpdateUser_Call) Return(_a0 error) *MockStorer_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorer_UpdateUser_Call) RunAndReturn(run func(context.Context, int64, domain.UserUpdate) error) *MockStorer_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorer creates a new instance of MockStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorer {
	mock := &MockStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
